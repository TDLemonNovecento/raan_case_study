my_network = network.initialize(n = length(data_nodes),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#create graph network for plotting
library(network)
my_network = network.initialize(n = length(data_nodes),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#set working directory to same directory as this file is located
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
working_directory = getwd()
print(paste("working directory is now set to: ", working_directory))
#define filepath to variables.py file
python_path = "variables.py"
content=file(python_path, open="r")
content_bylines = readLines(content)
#define variables as set in variables.py file
#If the file cannot be found, please paste the filepath directly to the variable
#xlsx_filepath
extended_variable_values = sub(".*=", "", content_bylines)
xlsx_filepath <- strsplit(extended_variable_values[1], "\"")[[1]][[2]]
edge_sheet_name <- strsplit(extended_variable_values[2], "\"")[[1]][[2]]
node_sheet_name <- strsplit(extended_variable_values[3], "\"")[[1]][[2]]
print(paste("The xlsx file to be processed is ", xlsx_filepath))
print(paste("nodes are extracted from sheet ", node_sheet_name))
print(paste("edges are extracted from sheet ", edge_sheet_name))
print("If any of this is not correct, either change in variables.py file
or directly in R file on lines 22-24")
#open xlsx file and read data to variables
library(readxl)
data_nodes <- read_excel(xlsx_filepath, sheet=node_sheet_name)
data_edges <- read_excel(xlsx_filepath, sheet=edge_sheet_name)
#create graph network for plotting
library(network)
#create network
#library(tidyverse)
my_network = network.initialize(n = length(data_nodes),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
View(my_network)
View(my_network)
print(my_network)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
print(my_network)
#add node names
network.vertex.names <- data_nodes$node_label
plot(data_net, vertex.cex = 3)
plot(my_network, vertex.cex = 3)
#add node attributes
set.vertex.attribute(my_network, "color", data_nodes$node_color)
summary.network(net, # the network we want to look at
print.adj = FALSE # if TRUE then this will print out the whole adjacency matrix.
)
summary.network(my_network, # the network we want to look at
print.adj = FALSE # if TRUE then this will print out the whole adjacency matrix.
)
#add edges
add.edges(my_network, data_edges$source_id, data_edges$target_id, vals.eval = data_edges$weights)
#add edges
add.edges(my_network, data_edges$source_id, data_edges$target_id)
#add edges
add.edges(my_network, tail = data_edges$source_id, head = data_edges$target_id)
View(data_edges)
View(data_nodes)
View(data_edges)
add.edge(my_network, 158, 3)
add.edge(my_network, "Elizabeth", "Daniel")
add.edge(my_network, 193, 3)
g<-network.initialize(3)
#Add an edge
add.edge(g,1,2)
g
#define filepath to variables.py file
python_path = "variables.py"
content=file(python_path, open="r")
content_bylines = readLines(content)
#define variables as set in variables.py file
#If the file cannot be found, please paste the filepath directly to the variable
#xlsx_filepath
extended_variable_values = sub(".*=", "", content_bylines)
xlsx_filepath <- strsplit(extended_variable_values[1], "\"")[[1]][[2]]
edge_sheet_name <- strsplit(extended_variable_values[2], "\"")[[1]][[2]]
node_sheet_name <- strsplit(extended_variable_values[3], "\"")[[1]][[2]]
print(paste("The xlsx file to be processed is ", xlsx_filepath))
print(paste("nodes are extracted from sheet ", node_sheet_name))
print(paste("edges are extracted from sheet ", edge_sheet_name))
print("If any of this is not correct, either change in variables.py file
or directly in R file on lines 22-24")
#open xlsx file and read data to variables
library(readxl)
data_nodes <- read_excel(xlsx_filepath, sheet=node_sheet_name)
data_edges <- read_excel(xlsx_filepath, sheet=edge_sheet_name)
#create graph network for plotting
library(network)
#create network
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
add.edge(my_network, 193, 3)
#initialize with correct no. of vertices(no of nodes)
edges=c(1,2, 2,3, 3, 1)
edges1<-data.frame(from_id=c("1","2","3","1","3","1","2"),
to_id=c("1", "1", "1", "2", "2", "3", "3"),
myEdgeWeight=c(1, 2, 1, 2, 5, 3, 9.5),
someLetters=c("B", "W", "L", "Z", "P", "Q", "E"),
edgeCols=c("red","green","blue","orange","pink","brown","gray"),
stringsAsFactors=FALSE)
edges<-data.frame(from_id=data_edges$source_id,
to_id=data_edges$target_id,
myEdgeWeight=data_edges$weights,
stringsAsFactors=FALSE)
View(edges)
View(edges1)
View(edges)
View(edges1)
View(edges)
View(my_network)
View(my_network)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
View(my_network)
add.edges(valueNet,edges[,1],edges[,2],
names.eval=rep(list(list("myEdgeWeight")),
nrow(elData)),
vals.eval=lapply(1:nrow(elData),function(r){as.list(elData[r,3:3])}))
add.edges(my_network,edges[,1],edges[,2],
names.eval=rep(list(list("myEdgeWeight")),
nrow(elData)),
vals.eval=lapply(1:nrow(elData),function(r){as.list(elData[r,3:3])}))
add.edges(my_network,edges[,1],edges[,2],
names.eval=rep(list(list("myEdgeWeight")),
nrow(edges)),
vals.eval=lapply(1:nrow(edges),function(r){as.list(edges[r,3:3])}))
add.edges(my_network,edges[,1],edges[,2])
add.edges(my_network,edges[,1],edges[,2], edge.check = FALSE)
#add node names
network.vertex.names <- data_nodes$node_label
#define filepath to variables.py file
python_path = "variables.py"
content=file(python_path, open="r")
content_bylines = readLines(content)
#define variables as set in variables.py file
#If the file cannot be found, please paste the filepath directly to the variable
#xlsx_filepath
extended_variable_values = sub(".*=", "", content_bylines)
xlsx_filepath <- strsplit(extended_variable_values[1], "\"")[[1]][[2]]
edge_sheet_name <- strsplit(extended_variable_values[2], "\"")[[1]][[2]]
node_sheet_name <- strsplit(extended_variable_values[3], "\"")[[1]][[2]]
print(paste("The xlsx file to be processed is ", xlsx_filepath))
print(paste("nodes are extracted from sheet ", node_sheet_name))
print(paste("edges are extracted from sheet ", edge_sheet_name))
print("If any of this is not correct, either change in variables.py file
or directly in R file on lines 22-24")
#open xlsx file and read data to variables
library(readxl)
data_nodes <- read_excel(xlsx_filepath, sheet=node_sheet_name)
data_edges <- read_excel(xlsx_filepath, sheet=edge_sheet_name)
library(network)
edges<-data.frame(from_id=data_edges$source_id,
to_id=data_edges$target_id,
myEdgeWeight=data_edges$weights,
stringsAsFactors=FALSE)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
add.edges(my_network,edges[,1],edges[,2], edge.check = FALSE)
?addEdges_R()
?addEdges_R
?addEdges_R.
?add.edges()
print(edges[,1])
add.edge(my_network, 966, 649)
add.edge(my_network, 2, 6)
#add node names
network.vertex.names <- data_nodes$node_label
#prepare edge data
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
#prepare edge data
library(tidyverse)
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
View(edge_list)
View(edges)
add.vertices(my_network, nv = length(data_nodes$node_id),
vattr = data_nodes$node_id)
add.vertices(my_network, length(data_nodes$node_id),
vattr = data_nodes$node_id)
print(length(data_nodes$node_id))
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
add.vertices(my_network, length(data_nodes$node_id),
vattr = data_nodes$node_id)
add.vertices(my_network, length(data_nodes$node_id),
vattr = c(data_nodes$node_id))
#add node names
network.vertex.names <- data_nodes$node_label
#add node attributes
set.vertex.attribute(my_network, "color", data_nodes$node_color)
add.vertices(my_network, length(data_nodes$node_id),
vattr = c(data_nodes$node_id))
attributes = c(data_nodes$node_id)
attributes = as.character(data_nodes$node_id)
add.vertices(my_network, length(data_nodes$node_id),
vattr = attributes)
attributes = c(data_nodes$node_id)
add.vertices(my_network, length(data_nodes$node_id),
vattr = attributes)
add.vertices(my_network, length(data_nodes$node_id))
vattr = attributes)
#add node names
network.vertex.names <- data_nodes$node_label
#add node names
network.vertex.names <- data_nodes$node_id
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#add node names
network.vertex.names <- data_nodes$node_id
#add node attributes
set.vertex.attribute(my_network, "color", data_nodes$node_color)
#add edges
add.edges(my_network, tail = data_edges$source_id,
head = data_edges$target_id,
vals.eval = data_edges$weights)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = data_nodes$node_id,
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
View(data_nodes)
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
node_list<-data.frame(no = seq(len(data_nodes$node_id)),
node_id = data_nodes$node_id)
node_list<-data.frame(no = seq(length(data_nodes$node_id)),
node_id = data_nodes$node_id)
View(node_list)
View(edge_list)
edge_from_indices <- tibble(edge_list, node_list$node_id %>% node_list$no)
#edge_list %>% add_column(from_index = node_list$no)
#mutate()
from_edges = full_join(edge_list, node_list, by = c("source_id" = "node_id"))
#edge_list %>% add_column(from_index = node_list$no)
#mutate()
from_edges = full_join(edge_list, node_list, by = c("from" = "node_id"))
View(from_edges)
#edge_list %>% add_column(from_index = node_list$no)
#mutate()
from_edges = left_join(edge_list, node_list, by = c("from" = "node_id"))
edge_list <- tibble(from = from_edges$no, to = from_edges$to)
View(edge_list)
View(edge_list)
#alternatively mutate() may be used, but this works, so I did it this way
from_edges = left_join(edge_list, node_list, by = c("from" = "node_id"))
edge_list <- tibble(from = from_edges$no, to = from_edges$to)
to_edges = left_join(edge_list, node_list, by = c("to" = "node_id"))
edge_list <- tibble(from = to_edges$from, to = from_edges$no)
#prepare edge data
library(tidyverse)
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
node_list<-data.frame(no = seq(length(data_nodes$node_id)),
node_id = data_nodes$node_id)
#alternatively mutate() may be used, but this works, so I did it this way
from_edges = left_join(edge_list, node_list, by = c("from" = "node_id"))
edge_list <- tibble(from = from_edges$no, to = from_edges$to)
to_edges = left_join(edge_list, node_list, by = c("to" = "node_id"))
edge_list <- tibble(from = to_edges$from, to = from_edges$no)
library(tidyverse)
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
node_list<-data.frame(no = seq(length(data_nodes$node_id)),
node_id = data_nodes$node_id)
#alternatively mutate() may be used, but this works, so I did it this way
from_edges = left_join(edge_list, node_list, by = c("from" = "node_id"))
edge_list <- tibble(from = from_edges$no, to = from_edges$to)
to_edges = left_join(edge_list, node_list, by = c("to" = "node_id"))
edge_list <- tibble(from = to_edges$from, to = to_edges$no)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#add node names
network.vertex.names <- data_nodes$node_id
#add node attributes
set.vertex.attribute(my_network, "color", data_nodes$node_color)
#add edges
add.edges(my_network, tail = edge_list$from,
head = edge_list$to,
vals.eval = data_edges$weights)
warnings()
View(my_network)
print(my_network)
plot(my_network, vertex.cex = 3)
summary.network(my_network, # the network we want to look at
print.adj = FALSE # if TRUE then this will print out the whole adjacency matrix.
)
#simple network plot
plot(data_net, vertex.cex = 3)
#plot
plot <- ggplot(my_network) + #data
aes(x = node_id, y = node_id, color = node_color) + #what to plot
geom_point() #type of plot
#plot
plot <- ggplot(data_nodes) + #data
aes(x = node_id, y = node_id, color = node_color) + #what to plot
geom_point() #type of plot
#plot with ggnet
library(GGally)
#plot
plot <- ggplot(data_nodes) + #data
aes(x = node_id, y = node_id, color = node_color) + #what to plot
geom_point() #type of plot
#plot
plot <- ggplot(data_nodes) + #data
aes(x = node_id, y = node_id, color = node_color) + #what to plot
geom_point() #type of plot
ggnet2(my_network, node.size = 2, color = "color")
ggnet2(my_network, node.size = 6, edge.size = "width", color = "color")
View(my_network)
#add edges
add.edges(my_network,
tail = edge_list$from,
head = edge_list$to,
names.eval = data_edges$weights)
#define filepath to variables.py file
python_path = "variables.py"
content=file(python_path, open="r")
content_bylines = readLines(content)
#define variables as set in variables.py file
#If the file cannot be found, please paste the filepath directly to the variable
#xlsx_filepath
extended_variable_values = sub(".*=", "", content_bylines)
xlsx_filepath <- strsplit(extended_variable_values[1], "\"")[[1]][[2]]
edge_sheet_name <- strsplit(extended_variable_values[2], "\"")[[1]][[2]]
node_sheet_name <- strsplit(extended_variable_values[3], "\"")[[1]][[2]]
print(paste("The xlsx file to be processed is ", xlsx_filepath))
print(paste("nodes are extracted from sheet ", node_sheet_name))
print(paste("edges are extracted from sheet ", edge_sheet_name))
print("If any of this is not correct, either change in variables.py file
or directly in R file on lines 22-24")
#open xlsx file and read data to variables
library(readxl)
data_nodes <- read_excel(xlsx_filepath, sheet=node_sheet_name)
data_edges <- read_excel(xlsx_filepath, sheet=edge_sheet_name)
#create graph network for plotting
library(network)
#prepare edge data
library(tidyverse)
edge_list <- tibble(from = data_edges$source_id, to = data_edges$target_id)
node_list<-data.frame(no = seq(length(data_nodes$node_id)),
node_id = data_nodes$node_id)
#alternatively mutate() may be used, but this works, so I did it this way
from_edges = left_join(edge_list, node_list, by = c("from" = "node_id"))
edge_list <- tibble(from = from_edges$no, to = from_edges$to)
to_edges = left_join(edge_list, node_list, by = c("to" = "node_id"))
edge_list <- tibble(from = to_edges$from, to = to_edges$no)
#initialize with correct no. of vertices(no of nodes)
my_network = network.initialize(n = length(data_nodes$node_id),
directed = TRUE, hyper = FALSE,
multiple = FALSE, bipartite = FALSE)
#add node names
network.vertex.names <- data_nodes$node_id
#add node attributes
set.vertex.attribute(my_network, "color", data_nodes$node_color)
#add edges
add.edges(my_network,
tail = edge_list$from,
head = edge_list$to,
names.eval = data_edges$weights)
summary.network(my_network, # the network we want to look at
print.adj = FALSE # if TRUE then this will print out the whole adjacency matrix.
)
View(my_network)
set.edge.attribute(my_network, "weight", data_edges$weights)
summary.network(my_network, # the network we want to look at
print.adj = FALSE # if TRUE then this will print out the whole adjacency matrix.
)
ggnet2(my_network, node.size = 6, edge.size = "weight", color = "color")
ggnet2(my_network, node.size = 6, edge.size = "weight"*0.5, color = "color")
plot.network(my_network,
vertex.col = "color", # color nodes by gender
vertex.cex = 3, # set node size to a fixed value
displaylabels = T, # show the node names
label.pos = 5, # display the names directly over nodes
label.col = "black", # the color of node lables
edge.lwd = get.edge.value(my_network,"weight")
)
ggnet2(my_network, node.size = 6, edge.lwd = get.edge.value(my_network,"weight"), color = "color")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
label = names,
color = "color")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
label = vertex.names,
color = "color")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
VertexLabeling = TRUE,
color = "color")
#for interactive 3D plot (data needs to be prepared first)
install.packages("visNetwork")
library(visNetwork)
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
VertexLabeling = TRUE,
color = "color")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
VertexLabeling = TRUE,
color = "color")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
color = "color",
label = "name")
ggnet2(my_network, node.size = 6,
edge.lwd = get.edge.value(my_network,"weight"),
vertex.label.font = 2,
vertex.label = "name",
color = "color")
ggnet2(my_network,label = "name",
edge.lwd = get.edge.value(my_network,"weight"),
vertex.label.font = 2,
vertex.label = "name",
color = "color")
